import numpy as np
from eda_nlp.code import eda as EDA
from utils import preprocess


'''
Our implementation of text oversampling based on Easy Data Augmentation (EDA)
techniques by Wei and Zou (2019). We compute the sampling coefficient for each
minority document and oversample the minority class by augmenting each document
by the given number of documents generated by EDA.
'''

class EDAOversampling:
	
	def __init__(self, alpha_sr=0.1, alpha_ri=0.1, alpha_rs=0.1, p_rd=0.1, s_ratio=0.5):
		### These are the default hyperparameter values
		self.alpha_sr = alpha_sr # Synonym Replacement
		self.alpha_ri = alpha_ri # Random Insertion
		self.alpha_rs = alpha_rs # Random Swap
		self.p_rd = p_rd         # Random Deletion
		self.s_ratio = s_ratio   # Desired class balance after sampling
		
		
	def sample(self, raw_texts, y_tr, stem=True):
		
		### raw_texts : list of unpreprocessed texts
		### y_tr      : list of binary labels (1 = minority class)
		### stem      : by default, stems the tokens after sampling
		
		### Sampling coefficient for each minority example. Note that the coefficient is
		### same for all examples, so the desired class balance may not be reached exactly
		self.s_coef = int(1+(self.s_ratio*len(y_tr)-sum(y_tr))/((1-self.s_ratio)*sum(y_tr)))
		
		eda_texts = []
		eda_y     = []
		
		for text, y in zip(raw_texts, y_tr):
			if y == 1:
				try:
					augmented_sample = EDA.eda(
							text, alpha_sr=self.alpha_sr, alpha_ri=self.alpha_ri,
							alpha_rs=self.alpha_rs, p_rd=self.p_rd, num_aug=self.s_coef)
					### The original text is included in the augmented set:
					for augmented_text in augmented_sample:
						eda_texts.append(augmented_text)
						eda_y.append(1)
				except IndexError:
					pass
			else:
				eda_texts.append(text)
				eda_y.append(0)
		
		if stem:
			eda_docs, _, _ = preprocess(eda_texts, min_df=0, stem=True)
			return [' '.join(doc) for doc in eda_docs], np.array(eda_y)
		
		return eda_texts, np.array(eda_y)
